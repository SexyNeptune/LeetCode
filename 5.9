## 面试题38. 字符串的排列
class Solution {
    List<String> res = new LinkedList<>();
    char [] c ;

    public String[] permutation(String s) {
        if(s == null) return null;
        c = s.toCharArray();
        dfs(0);
        return res.toArray(new String [res.size()]);
    }

    void dfs(int x){
        if(x == c.length -1){
            res.add(String.valueOf(c));
            return ;
        }
        Set<Character> set = new HashSet<>();
        for(int i = x; i < c.length; i++) {
            if(set.contains(c[i])) continue; // 重复，因此剪枝
            set.add(c[i]);
            swap(i, x); // 交换，将 c[i] 固定在第 x 位 
            dfs(x + 1); // 开启固定第 x + 1 位字符
            swap(i, x); // 恢复交换
        }
    }

    void swap(int a , int b){
        char temp = c[a] ;
        c[a] = c[b];
        c[b] = temp;
    }
}

## 面试题42. 连续子数组的最大和
class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        for(int i = 1 ; i < nums.length ; i++){
            nums[i] += Math.max(0 , nums[i-1]);
            max = Math.max(max , nums[i]);
        }
        return max;
    }
}
